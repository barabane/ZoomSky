import asyncio
from datetime import datetime

from aiogram import Router, types, F
from aiogram.filters import CommandStart
from tzlocal import get_localzone

from bot_settings import scheduler, bot
from database.db import db
from api.weather import weather
from keyboards.keyboards import main_kb
from utils.templates.weather_template import forecast_template, today_template

router = Router()


async def notifications(user_id):
    db.subscribe_to_notifi(user_id)
    coordinates = db.get_user(user_id)[4].split(sep=',')
    today = weather.today_weather(user_data={
        'lat': coordinates[0],
        'lon': coordinates[1]
    })

    await bot.send_message(user_id, text=today_template(today), parse_mode='HTML')


@router.message(CommandStart())
async def start_handler(msg: types.Message):
    keyboard = types.ReplyKeyboardMarkup(keyboard=[
        [
            types.KeyboardButton(
                text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã üìç', request_location=True)
        ]
    ], resize_keyboard=True, one_time_keyboard=True)

    if db.get_user(msg.from_user.id) == None:
        return await msg.answer(text='–î–ª—è –Ω–∞—á–∞–ª–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã', reply_markup=keyboard)

    await msg.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=main_kb)


@router.message(F.location)
async def func(msg: types.Message):
    city_name = weather.today_weather({
        'lat': msg.location.latitude,
        'lon': msg.location.longitude
    })['location']['name']

    db.update_user({'id': msg.from_user.id, 'username': msg.from_user.username, 'reg_date': datetime.now(
    ), 'city_name': city_name, 'coordinates': f'{msg.location.latitude},{msg.location.longitude}'})

    await msg.answer(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=main_kb)


@router.message(F.text == '–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å')
async def today_weather(msg: types.Message):
    coordinates = db.get_user(msg.from_user.id)[4].split(sep=',')
    today = weather.today_weather(user_data={
        'lat': coordinates[0],
        'lon': coordinates[1]
    })

    await msg.answer(text=today_template(today), parse_mode='HTML')


@router.message(F.text == '–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞')
async def tomorrow_weather(msg: types.Message):
    city_name = db.get_user(msg.from_user.id)[3]
    tomorrow = weather.tomorrow_weather(city_name=city_name)[0]

    await msg.answer(text=forecast_template(tomorrow), parse_mode='HTML')


@router.message(F.text == '–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π')
async def week_weather(msg: types.Message):
    city_name = db.get_user(msg.from_user.id)[3]
    week = weather.week_weather(city_name=city_name)

    for day in week:
        await msg.answer(text=forecast_template(day), parse_mode='HTML')
        await asyncio.sleep(1)


@router.message(F.text == '–ü–æ–¥–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
async def subscribe(msg: types.Message):
    is_subscribed = db.get_user(msg.from_user.id)[5]

    if is_subscribed == 1:
        return await msg.answer('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã')

    scheduler.add_job(notifications, 'cron', hour=8, minute=0, args=[
                      msg.from_user.id], id='my_job', timezone=get_localzone())
    await msg.answer('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8 —á–∞—Å–æ–≤ —É—Ç—Ä–∞')
